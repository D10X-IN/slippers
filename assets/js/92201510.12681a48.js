"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[876],{8374:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return r},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var a=n(2122),i=n(9756),l=(n(7294),n(3905)),s=["components"],r={sidebar_position:6},o="Template tags and filters",u={unversionedId:"template-tags-filters",id:"template-tags-filters",isDocsHomePage:!1,title:"Template tags and filters",description:"Slippers includes a number of extra template tags and filters to help template authors build reusable components.",source:"@site/docs/template-tags-filters.md",sourceDirName:".",slug:"/template-tags-filters",permalink:"/slippers/docs/template-tags-filters",editUrl:"https://github.com/mixxorz/slippers/edit/main/docs/docs/template-tags-filters.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Using components",permalink:"/slippers/docs/using-components"}},m=[{value:"attrs",id:"attrs",children:[]},{value:"fragment",id:"fragment",children:[]},{value:"match",id:"match",children:[]},{value:"var",id:"var",children:[]}],p={toc:m};function d(t){var e=t.components,n=(0,i.Z)(t,s);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"template-tags-and-filters"},"Template tags and filters"),(0,l.kt)("p",null,"Slippers includes a number of extra template tags and filters to help template authors build reusable components."),(0,l.kt)("h2",{id:"attrs"},"attrs"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"attrs")," tag is a handy shortcut that outputs template variables as element attributes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{# input_field component #}\n<input {% attrs type id name %}>\n\n{# Usage #}\n{% input_field type="text" id="first_name" name="first_name" %}\n\n{# Output #}\n<input type="text" id="first_name" name="first_name" />\n')),(0,l.kt)("p",null,"The parameters passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"attrs"),' are used for both the "key" of the attribute and the name of the variable to source its value from.'),(0,l.kt)("p",null,"Boolean values are treated differently. ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," values become empty attributes, and ",(0,l.kt)("inlineCode",{parentName:"p"},"False")," values aren't returned at all."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},"{# button component #}\n<button {% attrs disabled %}>{{ children }}</button>\n\n{# Usage #}\n{% #button disabled=True %}Can't click me{% /button %}\n{% #button disabled=False %}Click me{% /button %}\n\n{# Output #}\n<button disabled>Can't click me</button>\n<button>Click me</button>\n")),(0,l.kt)("p",null,"It's possible to specify the source of the attribute value by writing it as a keyword argument. This is useful if the attribute name is different from the variable you want to get it from."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{# input_field component #}\n<input {% attrs type id=field_id name %}>\n\n{# Usage #}\n{% input_field type="text" field_id="first_name" name="first_name" %}\n\n{# Output #}\n<input type="text" id="first_name" name="first_name" />\n')),(0,l.kt)("h2",{id:"fragment"},"fragment"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"fragment")," tag allows template fragments to be assigned to variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{% fragment as my_fragment %}\n  <p>Hello, World!</p>\n{% endfragment %}\n\n{# Output the HTML #}\n{{ my_fragment }}\n\n{# Pass it around #}\n{% my_component content=my_fragment %}\n{% include "my_app/my_other_component.html" with content=my_fragment %}\n')),(0,l.kt)("p",null,"One handy use for ",(0,l.kt)("inlineCode",{parentName:"p"},"fragment")," is string interpolation using DTL."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},"{% fragment as title %}\n{{ items|floatformat:2 }} items found.\n{% endfragment %}\n\n{% list_item title=title %}\n")),(0,l.kt)("h2",{id:"match"},"match"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"match")," filter outputs a string whose key matches the variable's value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{% with first="outline" second="ghost" third="square" %}\n  <button class="{{ first|match:"outline:btn-outline,ghost:btn-ghost" }}">Click me</button>\n  <button class="{{ second|match:"outline:btn-outline,ghost:btn-ghost" }}">Click me</button>\n  <button class="{{ third|match:"outline:btn-outline,ghost:btn-ghost" }}">Click me</button>\n{% endwith %}\n\n{# Output #}\n<button class="btn-outline">Click me</button>\n<button class="btn-ghost">Click me</button>\n<button class="">Click me</button>\n')),(0,l.kt)("p",null,"The syntax is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{{ variable|match:"key1:value1,key2:value2,key3:value3" }}\n')),(0,l.kt)("p",null,"Tip: You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," filter to set a default value for no matches."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{% with my_variable="nomatch" %}\n  <button class="{{ my_variable|match:"outline:btn-outline,ghost:btn-ghost"|default:"btn" }}">Click me</button>\n{% endwith %}\n\n{# Output #}\n<button class="btn">Click me</button>\n')),(0,l.kt)("h2",{id:"var"},"var"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"var")," tag allows for assigning values to variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig"},'{% var foo="Hello, World!" %}\n\n<div>{{ foo }}</div>\n\n{# Output #}\n<div>Hello, World!</div>\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"var")," tag is intended to be used inside component templates as a means to document the variables it requires and specify defaults."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-twig",metastring:'title="button.html"',title:'"button.html"'},'{% var variant=variant|default:"primary" %}\n\n<button class="{{ variant|match:"outline:btn-outline,ghost:btn-ghost" }}">{{ children }}</button>\n')))}d.isMDXComponent=!0}}]);